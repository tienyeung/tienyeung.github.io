<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tienyeung.github.io/</id>
    <title>阳阳の部落格</title>
    <updated>2019-10-09T10:50:17.292Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tienyeung.github.io/"/>
    <link rel="self" href="https://tienyeung.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://tienyeung.github.io//images/avatar.png</logo>
    <icon>https://tienyeung.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, 阳阳の部落格</rights>
    <entry>
        <title type="html"><![CDATA[二进制中1的个数]]></title>
        <id>https://tienyeung.github.io//post/er-jin-zhi-zhong-1-de-ge-shu</id>
        <link href="https://tienyeung.github.io//post/er-jin-zhi-zhong-1-de-ge-shu">
        </link>
        <updated>2019-10-09T10:39:05.000Z</updated>
        <summary type="html"><![CDATA[<p>做题时常常能遇到如何计算二进制数中的1的个数，在此做一个总结，因为我觉得比较有代表性，且有特殊方法可考。</p>
]]></summary>
        <content type="html"><![CDATA[<p>做题时常常能遇到如何计算二进制数中的1的个数，在此做一个总结，因为我觉得比较有代表性，且有特殊方法可考。</p>
<!-- more -->
<p><strong>如下有两种方法</strong>：</p>
<h1 id="按位与">按位与</h1>
<p>即将该二进制数与1相与，若不为0，说明该位(最低位)上为1，然后将1左移一位，依次与二进制数对比。</p>
<pre><code class="language-python">class Solution(object):
    def hammingWeight(self, n):
        &quot;&quot;&quot;
        :type n: int
        :rtype: int
        &quot;&quot;&quot;
        bits=0
        mask=1
        for i in range(0,32):
            if n&amp;mask !=0 :
                bits+=1
            mask&lt;&lt;=1
        return bits
</code></pre>
<h1 id="特殊方法">特殊方法</h1>
<p>将该数不断同比自己小1的数相与，直到结果为0为止。为什么n &amp;= (n – 1)能清除最右边的1呢？因为从二进制的角度讲，n相当于在n - 1的最低位加上1。举个例子，8（1000）= 7（0111）+ 1（0001），所以8 &amp; 7 = （1000）&amp;（0111）= 0（0000），清除了8最右边的1（其实就是最高位的1，因为8的二进制中只有一个1）。再比如7（0111）= 6（0110）+ 1（0001），所以7 &amp; 6 = （0111）&amp;（0110）= 6（0110），清除了7的二进制表示中最右边的1（也就是最低位的1）。</p>
<pre><code class="language-python">def count1(n):
        res = 0
        while n!=0:
            n&amp;=(n-1)
            res+=1
        
        return res
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[读中华史有感]]></title>
        <id>https://tienyeung.github.io//post/du-zhong-hua-shi-you-gan</id>
        <link href="https://tienyeung.github.io//post/du-zhong-hua-shi-you-gan">
        </link>
        <updated>2019-10-09T04:50:58.000Z</updated>
        <summary type="html"><![CDATA[<p>近来睡前伴我入眠的有声读本便是易中天先生所著的《易中天中华史》，《中华史》总36卷，如今已经写到了朱明王朝卷。早先因《明朝那些事儿》的缘故，我对明朝似乎有种与其它朝代不一样的情愫。或许是因为熟悉，所以我对明朝的历史颇感兴趣，对于明朝的灭亡也感到惋惜。大明王朝缔造于一个几近传奇的人物--朱元璋，生于微末长于贫寒却能大一统当日混乱之中国，完全不亚于同样生于市井的大汉天子刘邦，与之能抗衡的或许只有今日中国之太祖一人而已。</p>
]]></summary>
        <content type="html"><![CDATA[<p>近来睡前伴我入眠的有声读本便是易中天先生所著的《易中天中华史》，《中华史》总36卷，如今已经写到了朱明王朝卷。早先因《明朝那些事儿》的缘故，我对明朝似乎有种与其它朝代不一样的情愫。或许是因为熟悉，所以我对明朝的历史颇感兴趣，对于明朝的灭亡也感到惋惜。大明王朝缔造于一个几近传奇的人物--朱元璋，生于微末长于贫寒却能大一统当日混乱之中国，完全不亚于同样生于市井的大汉天子刘邦，与之能抗衡的或许只有今日中国之太祖一人而已。</p>
<!-- more -->
<p>明朝的灭亡同样富有传奇性，末代皇帝崇祯不愿投降，为保气节而自缢于景山，“天子守国门，君王死社稷”，崇祯帝保住了明朝最后的颜面，可终究昔日的大明帝国随着李自成的入主紫禁城而灭亡了，剩下的南明王朝只苟延残喘了数十年，也被大清所灭。在我看来，明朝在1644年，也就是李自成逼宫于紫禁城，朱由检亡于歪脖子树前就已经灭亡了，《明朝那些事儿》说这是大明气数已尽，连年的灾荒，百姓苦不堪言，起义也是应有之义。</p>
<p>我时常在想，我到底在遗憾惋惜什么？大明不过是一个如同历史上的所有朝代一样的封建王朝而已，既没有大唐的开放富强，也没有大宋的文人气质，也远达不到今日中国之繁盛，兴起衰败也不过是常有之事，百姓还是那些百姓，不同的只不过是当家做主的人轮番更替而已。也许是我读一本朝代史时，我总是理所当然的代入这个朝代，想象自己是当朝之人，所以我会同情建文帝被叔叔朱棣逼宫的凄惨，我会崇拜王阳明创立心学的伟大，我会愤恨王振依仗于英宗年少无知而为非作歹，也会佩服于谦守护京城的坚定，杨涟冒死直谏惨死狱中的正直，也不难怪会遗憾于崇祯自缢，大厦将倾。</p>
<p>我喜爱品读历史，也许这是我少有的爱好之一。黄仁宇先生的《万历十五年》我读了不下4遍，如今，我也时时翻阅。一来我相当喜欢这本的文笔，原文是英文的，中文版的经由本人及其好友翻译润色，读来既不失古人的文采斐然，也不失现人的流畅自然；二来，此书以诸多历史人物为小节，每小节诉说了每位人物的失败，如此，便串联起了大明王朝的大失败。以小见大，实在令人赞佩不已。也曾拜读过他写的《中国大历史》，此书从一个客观的，纵览全局的角度来品读中国历史，印象深刻的是他把中国古代的政治结构称为“间架性结构”，把古代社会结构称为“潜水艇夹心面包”，即上层皇权和下层百姓结构聚集，而中间的官僚组织和办事机构却松散混乱，这也正是封建社会与世界潮流时发生碰撞时必将灭亡的历史原因。</p>
<p>中华文明是有着3700年历史的深厚沉淀，从早先以女娲为代表的女性生殖崇拜的母系氏族社会，经由以伏羲为代表的男性生殖崇拜的父系氏族社会，到炎帝发扬广大的早期部落社会，以至黄帝击败蚩尤部族而建立的晚期部落社会，直至颛顼，帝喾继承而发展成的以尧，舜为领主的部落联盟社会，最后成长为禹，启创建的国家。其间涉及到的宗教，人文，社会等元素无不感叹中华文明成长的不易以及中华文化的博大精深。</p>
<p>我热爱历史，很大原因或许就是热爱中华文明史，我对中华文明有着无比的认可和赞佩。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[别在窗前等我]]></title>
        <id>https://tienyeung.github.io//post/chang-shi</id>
        <link href="https://tienyeung.github.io//post/chang-shi">
        </link>
        <updated>2019-10-07T05:51:20.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p><strong>别在窗前等我</strong>是影片《一本漫画闯天涯》的主题曲，此影片上映于1990年，彼时周星驰尚未大火，由'星仔'蜕变为'星爷'的'周星驰年'仍还有两年才能到来。但此刻，周星驰非喜剧风格片已经开始进行倒数了，最后一部电视剧也即将尘埃落定。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p><strong>别在窗前等我</strong>是影片《一本漫画闯天涯》的主题曲，此影片上映于1990年，彼时周星驰尚未大火，由'星仔'蜕变为'星爷'的'周星驰年'仍还有两年才能到来。但此刻，周星驰非喜剧风格片已经开始进行倒数了，最后一部电视剧也即将尘埃落定。</p>
</blockquote>
<!-- more -->
<center>
<font color=#EF475D size=5 face="微软雅黑">前周星驰时代的深刻缅怀</font>
</center>
<hr>
<p><a href="https://music.163.com/#/song?id=319374"><strong>别在窗前等我</strong></a>是影片<a href="https://movie.douban.com/subject/1307456/">《一本漫画闯天涯》</a>的主题曲，此影片上映于1990年，彼时周星驰尚未大火，由'星仔'蜕变为'星爷'的'周星驰年'仍还有两年才能到来。但此刻，周星驰非喜剧风格片已经开始进行倒数了，最后一部电视剧也即将尘埃落定。若是周星驰没有定性为喜剧演员，若是周星驰没有创造无厘头电影文化，那么可能也不失为一个演技颇佳，且自成体系的好演员。但历史没有假设，正如时光无法倒流一般，周星驰是注定要在香港电影史上留下浓墨重彩的天才人物。提到香港电影，免不到就要提到成龙，周润发，张国荣，林青霞，钟楚红等一时风光无二的优秀演员，也避不开邵氏兄弟，泽东影视，嘉禾制作等头部影视公司。但提到香港电影中独树一帜的无厘头风格电影，想到的就一定只有一个人--周星驰。</p>
<p><img src="https://tienyeung.github.io//post-images/timg.jpg" alt=""><br>
<strong>雄州雾列，俊才星驰</strong>，周星驰的母亲从《滕王阁序》中取'星驰'二字冠儿子之名，不可谓没有先见之明，周星驰的俊采注定将如夜空中的繁星一般无比闪耀。但即便是'星爷'，其'星途'也并未一帆风顺。小星星幼时喜欢在窗前站定，观察行人的一举一动，就这样往往能看一整天，但也正是这无微不至的观察为后来的演技奠定了一定的基础。长大后，与好友梁朝伟一同去考无线训练班，无心插柳的梁朝伟自此考上了，且自此星途璀璨，周星驰却名落孙山，乃至此后很久只是在主持儿童节目（将近30岁还只是在主持儿童节目，我总是在想，若是早几年遇上李修贤，那么周星驰的作品就会更多，我也就不至于翻来覆去看那几十部90年代的周星驰的影片了。）</p>
<p>周星驰是有天赋的，从他崭露头角的第一部影片<a href="https://movie.douban.com/subject/1871220/">《霹雳先锋》</a>就能看出，此时，周星驰还没有形成自己的风格体系，但却已能把小人物的辛酸苦痛演绎得入木三分，这得益于他本身就是小人物，可能就是本色出演，但无疑也有儿时的观察以及自身天赋的加成。</p>
<p>此后，吴君如及周星驰的<a href="https://movie.douban.com/subject/1298603/">《望夫成龙》</a>，使得周星驰无厘头风格出现雏形，喜剧天分初露。这部影片同样不失为一部好片，影片有难得的温情，吴君如与周星驰相濡以沫自始而终的爱情，二人同其父妹的亲情，伴随着时刻响起的淡淡的背景音乐，让我沉浸其中无比感动。我能看得进去并能相信这部影片讲述的事实，便说明即便是正剧，周星驰依然有闪光之点。</p>
<p>之后便是《一本漫画闯天涯》，此片至今让我想起便怀念便感动，我感动于三人的兄弟情谊，也忘不了影片结尾，阿星对柏安妮的告别话语“标哥跟俊哥去了南极，我现在去会他们”，但我们都知道，标哥跟俊哥都死了，死于暗杀，死于搏斗，但阿星看柏安妮无比温柔的眼神却让我真正相信，他是去找他们。这便笼罩上了一层悲情色彩，善意的谎言和真实的矛盾，让人不免无奈和感动。<em>“我们过去可能要呆很久”</em>，阿星此去前去复仇，带着一本漫画一往无前，影片此后却戛然而止，留下了空白，留下了念想。也许此去再也不回，葬身在“南极”，也许此去复仇成功，回来与安妮双宿双栖。这部电影无疑是成功的，无疑是前周星驰时代最好的注脚。我喜欢这部电影胜过喜欢后周星驰时代的许多无厘头电影，此时的周星驰真实善良单纯可爱。看此片时，我总是无端热泪，我在怀念这个时代的周星驰的巅峰颜值和青涩演技，我在怀念这个时代的诸多演员的风光无二，我在怀念这个时代的香港电影和香港，我始终在怀念的也许是回不去的从前。</p>
<p>此后，周星驰再拍了几部差强人意的电影，比如和周慧敏的<a href="https://movie.douban.com/subject/1302451/">《风雨同路》</a>，和张学友的<a href="https://movie.douban.com/subject/1301865/">《咖喱辣椒》</a>，和陈德容的<a href="https://movie.douban.com/subject/1419924/">《师兄撞鬼》</a>，至此，周星驰非典型作品正式完结，一个似乎没有浪花的前周星驰时代正式落幕。一个崭新的巅峰的无与伦比的后周星驰时代在一片风平浪静时突然电闪雷鸣霹雳而来，1990年末，<a href="https://movie.douban.com/subject/1298644/">《赌圣》</a>横空出世， 荣获当年度十大卖座影片第一名，开始与吴孟达拍档，是周星驰演绎生涯里程碑的作品，开启了周星驰香港票房霸屏时代。</p>
<p>我喜欢后周星驰的无厘头作品，不然我也不会在儿时翻来覆去看无数遍，但我同样喜欢前周星驰时代青涩单纯很少插科打诨的正片。两个周星驰我都喜欢，只要是周星驰出演的我都喜欢，可是，周星驰啊，你现在为什么退居幕后了呢？难道我真的要为一个时代的落幕而怀念么？难道要真的告诉我伴随我儿时无数孤独时光的寄托已经永远远去了么？难道我的青春早已在你不再出演后正式告终了么？</p>
<p><strong>别在窗前等我</strong>，就用作是周星驰对这个时代的告别吧。<br>
但也许，<br>
也许他只是去了“南极”，可能要过很久才回来。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LaTex入门]]></title>
        <id>https://tienyeung.github.io//post/LaTex</id>
        <link href="https://tienyeung.github.io//post/LaTex">
        </link>
        <updated>2019-06-15T08:49:30.000Z</updated>
        <summary type="html"><![CDATA[<p>有很多 Geeks 或者 LaTeX’s Fanatical Fans 过分地强调了 LaTeX 的一些并非重点的特性，以至于很多初学者会觉得 LaTeX 很神秘很复杂，从而引发了初学者的畏难情绪甚至是负面情绪。尽管这些 Fans 说得并没有错，我是说在事实上，但是他们的表达方式和内心态度却间接阻碍了 LaTeX 的发展，我想这也是和他们的初衷相悖的。</p>
]]></summary>
        <content type="html"><![CDATA[<p>有很多 Geeks 或者 LaTeX’s Fanatical Fans 过分地强调了 LaTeX 的一些并非重点的特性，以至于很多初学者会觉得 LaTeX 很神秘很复杂，从而引发了初学者的畏难情绪甚至是负面情绪。尽管这些 Fans 说得并没有错，我是说在事实上，但是他们的表达方式和内心态度却间接阻碍了 LaTeX 的发展，我想这也是和他们的初衷相悖的。</p>
<!-- more -->
<p>我曾经也受到过这些言论的影响，但幸运的事，至今为止我已经越过了这些障碍，并更加坚信了他们所言（LaTeX 的优点）的正确性。因此我想以我自己的方式，向更多的人介绍 LaTeX —— <strong>这个优雅，但有着自己高傲，却绝不复杂甚至神秘的东西</strong>。</p>
<h2 id="你将从这里看到">你将从这里看到</h2>
<ol>
<li>（几乎是）最简洁的 (La)TeX 编辑器——TeXworks——的基本使用方法；</li>
<li>如何使用 (Xe)LaTeX 进行简单的<strong>中英混排</strong>；</li>
<li>简单的文章组织结构；</li>
<li>如何用 (Xe)LaTeX 进行数学公式的排版；</li>
<li>如何在 (Xe)LaTeX 的文档中插入图片/表格；</li>
<li>如何进行简单的版面设置；</li>
<li>几个最常见的带有 TeX 的单词的含义；</li>
<li>出现问题应当如何处理/怎样聪明地提出你的问题——怎样从这里毕业。</li>
</ol>
<h2 id="你不会从这里看到">你不会从这里看到</h2>
<ol>
<li><a href="https://liam.page/texlive/">如何安装 TeX 发行</a>；</li>
<li>特殊需求（特殊宏包）的解决方法；</li>
<li>关于若干 TeX 发行的好坏比较；</li>
<li>关于各种 TeX 编辑器的好坏比较；</li>
<li>过多的废话。</li>
</ol>
<h2 id="你应当如何阅读本文">你应当如何阅读本文</h2>
<p>事实上本文在行文过程中，会有相当多的提示帮助你以正确的方式阅读。因此有必要在此先介绍一下最常用的一些标记。</p>
<ol>
<li>
<p>斜体：使用<em>斜体</em> 意味着如果忽略掉这些文字，你可能在<em>逻辑</em> 上很难理解后面某处的知识；</p>
</li>
<li>
<p>粗体：使用<strong>粗体</strong>意味如果忽略掉这些文字，你可能在<strong>TeX 的概念</strong>上很难理解后面某处的知识；</p>
</li>
<li>
<p>粗斜体：使用<strong>粗斜体</strong> 基本是最重要的部分，是上述两种情况的合并；</p>
</li>
<li>
<p>引用：使用引用，</p>
<blockquote>
<p>表明这些文字在你第一次阅读本文的时候<em>不需要</em> 了解，其中的内容可能过于深奥，或者过于琐碎。对于第一次接触 TeX 的你（如果你是 TeX 资深使用者当然不在此列），如果了解到这些内容可能会使你困惑，并且不会从实际上增加你对 TeX 的领悟以及对 TeX 的好感。</p>
</blockquote>
</li>
</ol>
<h2 id="关于编辑器的简单介绍">关于编辑器的简单介绍</h2>
<p>TeX 的源代码是后缀为 <code>.tex</code> 的纯文本文件。使用任意纯文本编辑器，都可以修改 <code>.tex</code> 文件：包括 Windows 自带的记事本程序，也包括专为 TeX 设计的编辑器（TeXworks, TeXmaker, TeXstudio, WinEdt 等），还包括一些通用的文本编辑器（Sublime Text, Atom, Visual Studio Code 等）。你可以在这些能够编辑纯文本文件的编辑器中任选其一作为你的 TeX 编辑器，也可以使用 TeX 发行自带的编辑器。最流行的两个 TeX 发行（TeX Live 和 MiKTeX）都带有 TeXworks 编辑器。</p>
<blockquote>
<p>所谓 TeX 发行，也叫 TeX 发行版、TeX 系统或者 TeX 套装，指的是包括 TeX 系统的各种可执行程序，以及他们执行时需要的一些辅助程序和宏包文档的集合。</p>
</blockquote>
<p>本文只介绍 TeXworks 的使用，原因有以下一些：</p>
<ul>
<li>TeXworks 是 TeX Live 自带的编辑器，而 TeX Live 是 TeX User Group 出品的跨平台发行版，各个操作系统都可以使用；</li>
<li>几乎所有 TeX 发行版都带有 TeXworks；</li>
<li>TeXworks 十分简洁，除了最基本的功能之外，没有其他复杂的东西，能使你将注意力集中在 TeX 的学习上。</li>
</ul>
<h3 id="启动-texworks">启动 TeXworks</h3>
<p>启动 TeXworks 很简单，你可以在 Windows 启动对话框中输入 texworks 按回车。具体步骤是：</p>
<ul>
<li>按下键盘上的 Windows 徽标键，同时按下 R 键 —— <code>&lt;Win&gt; + R</code>;</li>
<li>键入 <code>texworks</code>；</li>
<li>回车。</li>
</ul>
<p>如果这样打不开 TeXworks，你可能需要从开始菜单找到 TeXworks 图标以启动；或者进入 TeX 系统的安装目录找到 TeXworks。</p>
<p>启动之后，TeXworks 的界面，会默认占据你屏幕的左半边，右半边留空。效果如下图：</p>
<figure data-type="image" tabindex="1"><img src="https://app.yinxiang.com/shard/s62/res/4af191e8-a41d-45c9-adfb-36ace4a0517b.png" alt=" "></figure>
<p>图中空白的部分，就是输入编辑文本的编辑框；在编辑框的右下角，显示有三个按钮，最左边的是换行符模式，中间是<em>编码模式</em>，右边标示当前光标所在位置；编辑框的上方是工具栏，工具栏的右半部分使大家熟悉的功能（新建、打开、保存、撤消、恢复、剪切、复制、黏贴、查找、替换），工具栏的左边则是<em>编译按钮</em> （TeXworks 也称其为「排版工具」）；工具栏在往上，则是菜单栏，此处按下不表。</p>
<blockquote>
<p>Windows，Unix 等操作系统对待「换行符」是有不同的。索性 TeXworks 为我们做了足够的提示，方面我们的选择（点击一下那个按钮就知道了）。一般而言，保持默认即可。</p>
<p>字符（包括英文字符和中文字符）在计算机中，经过编码以二进制的形式存储在计算机中。如果编辑器编码和计算机内部编码不一致，则会导致所谓「乱码」的现象。TeXworks 默认使用 UTF8 编码，在我们的文档中不需要进行任何更改，而对于一些其他的文档可能需要按照要求更改编码。</p>
</blockquote>
<h3 id="排版工具">排版工具</h3>
<p>TeXworks 为我们预设了若干排版工具（pdfTeX, pdfLaTeX, XeTeX, XeLaTeX 等），本文主要用到其中的 <strong>XeLaTeX</strong>。关于这些排版工具的细节，讲解起来会有些复杂。因此此处按下不表，若有兴趣，可以参看<a href="https://liam.page/2014/09/08/latex-introduction/#TeX-%E5%AE%B6%E6%97%8F">后文</a>。当你对 TeX 系统相当熟悉之后，也可以不使用 TeXworks 预设的工具，自己配置排版工具。</p>
<p>TeXworks 默认的排版工具是 pdfLaTeX。如果你希望更改这个默认值，可以在<em>编辑 - 首选项 - 排版 - 处理工具 - 默认</em> 中修改。</p>
<h2 id="第一篇文档">第一篇文档</h2>
<h3 id="hello-world">Hello, world!</h3>
<p>在编辑框中，输入如下内容：</p>
<p>helloworld.tex</p>
<table>
<thead>
<tr>
<th><code>12345</code></th>
<th><code>\documentclass{article}% 这里是导言区\begin{document}Hello, world!\end{document}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>将文档保存在你希望的位置，然后在排版工具的下拉选框中选中 <strong>XeLaTeX</strong> 后，按下绿色的编译按钮。一会儿，如果没有意外，屏幕的右边就会出现编译之后结果。如下图：</p>
<figure data-type="image" tabindex="2"><img src="https://app.yinxiang.com/shard/s62/res/6216afb4-bf5f-4876-bc95-0ae5a6dd6926/818901c1jw1e44e55rnkkj211y0kmwgi.jpg" alt=" "></figure>
<blockquote>
<p>请注意，由于操作系统编码和 TeX 内部实现的限制，在 Windows 平台上，TeX 涉及到的文件（包括 <code>.tex</code>, <code>.jpg</code> 等各类文件）都不要包含中文名字。否则，在编译时可能会因为编码问题导致稀奇古怪的报错。</p>
</blockquote>
<p>很容易发现，输入进编辑框的五行文字，在最终输出的 pdf 档中只显示了 1 行。事实上，交付 TeX 处理的文档内容，并不会全部输出。</p>
<p>此处的第一行 <code>\documentclass{article}</code> 中包含了一个控制序列（或称命令/标记）。所谓控制序列，是以反斜杠 <code>\</code> 开头，以第一个<strong>空格或非字母</strong> 的字符结束的一串文字。它们不被输出，但是他们会影响输出文档的效果。这里的控制序列是 <code>documentclass</code>，它后面紧跟着的 <code>{article}</code> 代表这个控制序列有一个必要的参数，该参数的值为 <code>article</code>。这个控制序列的作用，是调用名为 <code>article</code> 的文档类。</p>
<p><strong>请注意，TeX 对控制序列的大小写是敏感的</strong>。</p>
<blockquote>
<p>部分控制序列还有被方括号 <code>[]</code> 包括的可选参数。</p>
<p>所谓文档类，即是 TeX 系统预设的（或是用户自定的）一些格式的集合。不同的文档类在输出效果上会有差别。</p>
</blockquote>
<p>此处的第二行以 <code>%</code> 开头。TeX 以百分号 <code>%</code> 作为注释标记。具体来说，TeX 会忽略从 <code>%</code> 开始到当前行末尾的所有内容。这些内容不会被输出，也不影响最终排版效果，只供人类阅读。若要输出 <code>%</code> 字符本身，则需要在 <code>%</code> 之前加上反斜杠 <code>\</code> 进行转义（escape）。例如：</p>
<table>
<thead>
<tr>
<th><code>1</code></th>
<th><code>今年的净利润为 20\%，比去年高。</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>此处 <code>%</code> 被当做正常的百分号处理，其后的文字也将被正常输出。</p>
<p>我们继续分析第一篇文档的内容。在注释行之后出现了控制序列 <code>begin</code>。这个控制序列总是与 <code>end</code> 成对出现。这两个控制序列以及他们中间的内容被称为「环境」；它们之后的第一个必要参数总是<strong>一致的</strong>，被称为环境名。</p>
<p>只有在 <code>document</code> 环境中的内容，才会被正常输出到文档中去或是作为控制序列对文档产生影响。也就是说，在 <code>\end{document}</code> 之后插入任何内容都是无效的。</p>
<p>从 <code>\documentclass{article}</code> 开始到 <code>\begin{document}</code> 之前的部分被称为导言区。你可以将导言区理解为是对整篇文档进行设置的区域——在导言区出现的控制序列，往往会影响整篇文档的格式。</p>
<blockquote>
<p>比如，我们通常在导言区设置页面大小、页眉页脚样式、章节标题样式等等。</p>
</blockquote>
<h3 id="实现中英文混排">实现中英文混排</h3>
<blockquote>
<p>关于 LaTeX 的中文支持，首先要说的是：在现在，一切教你使用 <code>CJK</code> 宏包的模板、人、网页、书，都是糟糕的、有害的、恼人的、邪恶的和应该摒弃的。</p>
</blockquote>
<p>成功编译输出第一个文档之后，中国 TeX 用户面临的第二个普遍问题大概就是「实现中英文混排」了。众所周知，TeX 系统是高教授开发的。在 TeX 开发当初并没有考虑到亚洲文字的问题。因此早期的 TeX 系统并不能直接支持中文，必须要用其他工具先处理一下（或者是一些宏包之类的）。但是现在，XeTeX 原生支持 Unicode，并且可以方便地调用系统字体。可以说解决了困扰中国 TeX 使用者多年的大问题。至此，我们只需要使用几个简单的宏包，就能完成中文支持了。</p>
<p>所谓宏包，就是一系列控制序列的合集。这些控制序列太常用，以至于人们会觉得每次将他们写在导言区太过繁琐，于是将他们打包放在同一个文件中，成为所谓的宏包（台湾方面称之为「巨集套件」）。<code>\usepackage{}</code> 可以用来调用宏包。</p>
<p>除去中文支持，中文的版式处理和标点禁则也是不小的挑战。好在由吴凌云和江疆牵头，现在主要由刘海洋、李清和我维护的 <code>CTeX</code> 宏集一次性解决了这些问题。<code>CTeX</code> 宏集的优势在于，它能适配于多种编译方式；在内部处理好了中文和中文版式的支持，隐藏了这些细节；并且，提供了不少中文用户需要的功能接口。我们来看如何使用 <code>CTeX</code> 宏集来处理中英文混排的文档。</p>
<blockquote>
<p>请注意，<code>CTeX</code> 宏集和 <code>CTeX</code> 套装是两个不同的东西。<code>CTeX</code> 宏集本质是 LaTeX 宏的集合，包含若干文档类（<code>.cls</code> 文件）和宏包（<code>.sty</code> 文件）。<code>CTeX</code> 套装是一个<strong>过时的</strong> TeX 系统。</p>
<p>新版 <code>CTeX</code> 宏集的默认能够自动检测用户的操作系统，并为之配置合适的字库。对于 Windows 用户、Mac OS X 用户和 Linux 用户，都无需做任何配置，就能使用 <code>CTeX</code> 宏集来排版中文。[2015-05-20 更新]</p>
</blockquote>
<p>在 TeXworks 编辑框中输入以下内容，<strong>以 UTF-8 编码保存，使用 XeLaTeX 编译</strong>：</p>
<p>EC-mix.tex</p>
<table>
<thead>
<tr>
<th><code>1234</code></th>
<th><code>\documentclass[UTF8]{ctexart}\begin{document}你好，world!\end{document}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>如果没有意外，你将会看到类似下图的输出结果。</p>
<figure data-type="image" tabindex="3"><img src="https://app.yinxiang.com/shard/s62/res/8dca06b4-445f-46ef-9478-79d4b7090aee.png" alt=" "></figure>
<p>相较于之前的例子，这份代码只有细微的差异：</p>
<ol>
<li>文档类从 <code>article</code> 变为 <code>ctexart</code>；</li>
<li>增加了文档类选项 <code>UTF8</code>。</li>
</ol>
<blockquote>
<p>你也可以直接使用 <code>xeCJK</code> 宏包来支持中英文混排。不过大多数情况是不推荐这样做的。因此，如果你能抑制住你小小的好奇心，可以暂时略过这一段，回头再看不迟。<code>:)</code></p>
<p>在 TeXworks 编辑框中输入以下内容，保存，使用 XeLaTeX 编译：</p>
<p>xeCJK-demo.tex</p>
<table>
<thead>
<tr>
<th><code>123456</code></th>
<th><code>\documentclass{article}\usepackage{xeCJK} %调用 xeCJK 宏包\setCJKmainfont{SimSun} %设置 CJK 主字体为 SimSun （宋体）\begin{document}你好，world!\end{document}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</blockquote>
<blockquote>
<p>如果一切顺利，你将会在屏幕右边的窗口，看见类似下图的输出结果。</p>
<figure data-type="image" tabindex="4"><img src="https://app.yinxiang.com/shard/s62/res/8dca06b4-445f-46ef-9478-79d4b7090aee.png" alt=" "></figure>
<p>除了 “document” 环境中同时出现了中文和英文，和最原始的 Hello, world! 不同点在于，导言区中多出了两条控制序列。他们的作用我已经用注释标出了。</p>
<p><code>\setCJKmainfont{·}</code>是定义在 “xeCJK” 宏包中的控制序列，它可以用来设置 CJK 主字体。</p>
<p>如果你的 TeX 系统提示找不到字体，请按以下提示操作。</p>
<p>Mac OS X 用户请参照<a href="https://liam.page/2014/11/02/latex-mactex-chinese-support/">这篇博客</a>中的方法，使用系统自带的字体册程序来查看系统字体。</p>
<p>非 Mac OS X 用户请按照如下步骤打开系统命令行（*nix系统请打开终端）：</p>
<ul>
<li>按下<code>&lt;win&gt; + R</code>；</li>
<li>键入<code>cmd</code>, 回车。</li>
</ul>
<p>在系统命令行中输入如下命令：</p>
<pre><code>fc-list :lang=zh-cn &gt; C:\font_zh-cn.txt
</code></pre>
<p>（相信使用 *nix 的你，一定知道如何修改上述命令达到你想要的效果）</p>
<p>打开 C 盘根目录下的 <code>C:\font_zh-cn.txt</code> 纯文本文档，里面的内容就是你当前系统可用的全部中文字体，形如：</p>
<figure data-type="image" tabindex="5"><img src="https://app.yinxiang.com/shard/s62/res/09fb44b6-6883-4796-81a3-ac481f682892.png" alt=" "></figure>
<p>每一个小黑框之间的内容，就对应着一个可用的字体。这些小黑框实际上是换行符，但是由于 Windows 系统的原因，他们没有被正常显示。如果看着不爽，你可以尝试用 TeXworks 打开这个文件查看（放心，能够打开的）。以下是我用 gVim 打开的效果：</p>
<figure data-type="image" tabindex="6"><img src="https://app.yinxiang.com/shard/s62/res/dea3db3e-94c8-4421-8044-01f164d79465.png" alt=" "></figure>
<p>其中的每一行，都代表着一个可用的字体。其形式如下：</p>
<pre><code>&lt;字体文件路径&gt;: &lt;字体标示名1&gt;, &lt;字体表示名2&gt;:Style=&lt;字体类型&gt;
</code></pre>
<p>我们可以看到图中的倒数第四行</p>
<pre><code>C:/WINDOWS/fonts/simsun.ttc: 宋体,SimSun:style=Regular
</code></pre>
<p>出现了之前文档里调用的字体<code>SimSun</code>，此处表明该字体有两个表示名：<code>宋体</code>和<code>SimSun</code>，我们在<code>\setCJKmainfont{·}</code>中填入任意一个都有同样的效果。</p>
<p>因此，如果之前的文档无法编译通过，请在你的操作系统字体中，选取一个自己喜欢的，将它的字体表示名填入到<code>\setCJKmainfont{·}</code>中去。</p>
</blockquote>
<h2 id="组织你的文章">组织你的文章</h2>
<h3 id="作者-标题-日期">作者、标题、日期</h3>
<p>保存并用 XeLaTeX 编译如下文档，查看效果：</p>
<table>
<thead>
<tr>
<th><code>12345678</code></th>
<th><code>\documentclass[UTF8]{ctexart}\title{你好，world!}\author{Liam}\date{\today}\begin{document}\maketitle你好，world!\end{document}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>导言区复杂了很多，但和之前的文档主要的区别只有一处：定义了标题、作者、日期。</p>
<p>在 <code>document</code> 环境中，除了原本的<code>你好，world!</code>，还多了一个控制序列 <code>maketitle</code>。这个控制序列能将在导言区中定义的标题、作者、日期按照预定的格式展现出来。</p>
<blockquote>
<p>使用<code>titling</code>宏包可以修改上述默认格式。参考<a href="http://texdoc.net/texmf-dist/doc/latex/titling/titling.pdf">TeXdoc</a>。</p>
</blockquote>
<h3 id="章节和段落">章节和段落</h3>
<p>保存并用 XeLaTeX 编译如下文档，查看效果：</p>
<table>
<thead>
<tr>
<th><code>123456789101112131415161718</code></th>
<th><code>\documentclass[UTF8]{ctexart}\title{你好，world!}\author{Liam}\date{\today}\begin{document}\maketitle\section{你好中国}中国在East Asia.\subsection{Hello Beijing}北京是capital of China.\subsubsection{Hello Dongcheng District}\paragraph{Tian'anmen Square}is in the center of Beijing\subparagraph{Chairman Mao}is in the center of 天安门广场。\subsection{Hello 山东}\paragraph{山东大学} is one of the best university in 山东。\end{document}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>在文档类 <code>article</code>/<code>ctexart</code> 中，定义了五个控制序列来调整行文组织结构。他们分别是</p>
<ul>
<li><code>\section{·}</code></li>
<li><code>\subsection{·}</code></li>
<li><code>\subsubsection{·}</code></li>
<li><code>\paragraph{·}</code></li>
<li><code>\subparagraph{·}</code></li>
</ul>
<blockquote>
<p>在<code>report</code>/<code>ctexrep</code>中，还有<code>\chapter{·}</code>；在文档类<code>book</code>/<code>ctexbook</code>中，还定义了<code>\part{·}</code>。</p>
</blockquote>
<h3 id="插入目录">插入目录</h3>
<p>在上一节的文档中，找到 <code>\maketitle</code>，在它的下面插入控制序列 <code>\tableofcontents</code>，保存并用 XeLaTeX 编译<strong>两次</strong>，观察效果：</p>
<table>
<thead>
<tr>
<th><code>12345678910111213141516171819</code></th>
<th><code>\documentclass[UTF8]{ctexart}\title{你好，world!}\author{Liam}\date{\today}\begin{document}\maketitle\tableofcontents\section{你好中国}中国在East Asia.\subsection{Hello Beijing}北京是capital of China.\subsubsection{Hello Dongcheng District}\paragraph{Tian'anmen Square}is in the center of Beijing\subparagraph{Chairman Mao}is in the center of 天安门广场。\subsection{Hello 山东}\paragraph{山东大学} is one of the best university in 山东。\end{document}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p>试试交换 <code>\maketitle</code> 和 <code>\tableofcontents</code> 的顺序，看看会发生什么，想想为什么。</p>
</blockquote>
<p>请注意，在「你好中国」这一节中，两次「中国在East Asia.」中夹有一个空行，但输出却只有一个换行并没有空行。这是因为 LaTeX 将一个换行当做是一个简单的空格来处理，如果需要换行另起一段，则需要用两个换行（一个空行）来实现。</p>
<h2 id="插入数学公式">插入数学公式</h2>
<p>首先恭喜你看到这里。如果前面的几个文档你都认真编译过了，那么你已经可以胜任许多文档的排版工作。下面我们进入 LaTeX 最为犀利的部分。</p>
<p>这部分的演示中，为了节省篇幅，将取消导言区中中文支持的部分。在实际使用中，你只需要将导言区中的相关部分加上，就可以同时使用中文和编写数学公式了。</p>
<p>为了使用 AMS-LaTeX 提供的数学功能，我们需要在导言区加载 <code>amsmath</code> 宏包：</p>
<table>
<thead>
<tr>
<th><code>1</code></th>
<th><code>\usepackage{amsmath}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="数学模式">数学模式</h3>
<p>LaTeX 的数学模式有两种：行内模式 (inline) 和行间模式 (display)。前者在正文的行文中，插入数学公式；后者独立排列单独成行，并自动居中。</p>
<p>在行文中，使用 <code>$ ... $</code> 可以插入行内公式，使用 <code>\[ ... \]</code> 可以插入行间公式，如果需要对行间公式进行编号，则可以使用 <code>equation</code> 环境：</p>
<table>
<thead>
<tr>
<th><code>123</code></th>
<th><code>\begin{equation}...\end{equation}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p>行内公式也可以使用 <code>\(...\)</code> 或者 <code>\begin{math} ... \end{math}</code> 来插入，但略显麻烦。<br>
无编号的行间公式也可以使用 <code>\begin{displaymath} ... \end{displaymath}</code> 或者 <code>\begin{equation*} ... \end{equation*}</code> 来插入，但略显麻烦。（<code>equation*</code> 中的 <code>*</code> 表示环境不编号）<br>
也有 plainTeX 风格的 <code>$$ ... $$</code> 来插入不编号的行间公式。但是在 LaTeX 中这样做会改变行文的默认行间距，不推荐。请参考<a href="https://www.zhihu.com/question/27589739/answer/37237684">我的回答</a>。</p>
</blockquote>
<h3 id="上下标">上下标</h3>
<p>示例代码（请保存后，使用 XeLaTeX 编译，查看效果）：</p>
<table>
<thead>
<tr>
<th><code>1234567891011</code></th>
<th><code>\documentclass{article}\usepackage{amsmath}\begin{document}Einstein 's $E=mc^2$.\[ E=mc^2. \]\begin{equation}E=mc^2.\end{equation}\end{document}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>在这里提一下关于公式标点使用的规范。行内公式和行间公式对标点的要求是不同的：行内公式的标点，应该放在数学模式的限定符之外，而行间公式则应该放在数学模式限定符之内。</p>
<p>在数学模式中，需要表示上标，可以使用 <code>^</code> 来实现（下标则是 <code>_</code>）。<strong>它默认只作用于之后的一个字符</strong>，如果想对连续的几个字符起作用，请将这些字符用花括号 <code>{}</code> 括起来，例如：</p>
<table>
<thead>
<tr>
<th><code>1</code></th>
<th><code>\[ z = r\cdot e^{2\pi i}. \]</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="根式与分式">根式与分式</h3>
<p>根式用 <code>\sqrt{·}</code> 来表示，分式用 <code>\frac{·}{·}</code> 来表示（第一个参数为分子，第二个为分母）。</p>
<p>示例代码（请保存后，使用 XeLaTeX 编译，查看效果）：</p>
<table>
<thead>
<tr>
<th><code>123456789</code></th>
<th><code>\documentclass{article}\usepackage{amsmath}\begin{document}$\sqrt{x}$, $\frac{1}{2}$.\[ \sqrt{x}, \]\[ \frac{1}{2}. \]\end{document}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>可以发现，在行间公式和行内公式中，分式的输出效果是有差异的。如果要强制行内模式的分式显示为行间模式的大小，可以使用 <code>\dfrac</code>, 反之可以使用 <code>\tfrac</code>。</p>
<blockquote>
<p>在行内写分式，你可能会喜欢 <code>xfrac</code> 宏包提供的 <code>\sfrac</code> 命令的效果。</p>
</blockquote>
<blockquote>
<p>排版繁分式，你应该使用 <code>\cfrac</code> 命令。</p>
</blockquote>
<h3 id="运算符">运算符</h3>
<p>一些小的运算符，可以在数学模式下直接输入；另一些需要用控制序列生成，如</p>
<table>
<thead>
<tr>
<th><code>12</code></th>
<th><code>\[ \pm\; \times \; \div\; \cdot\; \cap\; \cup\;\geq\; \leq\; \neq\; \approx \; \equiv \]</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>连加、连乘、极限、积分等大型运算符分别用 <code>\sum</code>, <code>\prod</code>, <code>\lim</code>, <code>\int</code> 生成。他们的上下标在行内公式中被压缩，以适应行高。我们可以用 <code>\limits</code> 和 <code>\nolimits</code> 来强制显式地指定是否压缩这些上下标。例如：</p>
<table>
<thead>
<tr>
<th><code>1234</code></th>
<th><code>$ \sum_{i=1}^n i\quad \prod_{i=1}^n $$ \sum\limits _{i=1}^n i\quad \prod\limits _{i=1}^n $\[ \lim_{x\to0}x^2 \quad \int_a^b x^2 dx \]\[ \lim\nolimits _{x\to0}x^2\quad \int\nolimits_a^b x^2 dx \]</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>多重积分可以使用 <code>\iint</code>, <code>\iiint</code>, <code>\iiiint</code>, <code>\idotsint</code> 等命令输入。</p>
<table>
<thead>
<tr>
<th><code>1</code></th>
<th><code>\[ \iint\quad \iiint\quad \iiiint\quad \idotsint \]</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="定界符括号等">定界符（括号等）</h3>
<p>各种括号用 <code>()</code>, <code>[]</code>, <code>\{\}</code>, <code>\langle\rangle</code> 等命令表示；注意花括号通常用来输入命令和环境的参数，所以在数学公式中它们前面要加 <code>\</code>。因为 LaTeX 中 <code>|</code> 和 <code>\|</code> 的应用过于随意，amsmath 宏包推荐用 <code>\lvert\rvert</code> 和 <code>\lVert\rVert</code> 取而代之。</p>
<p>为了调整这些定界符的大小，amsmath 宏包推荐使用 <code>\big</code>, <code>\Big</code>, <code>\bigg</code>, <code>\Bigg</code> 等一系列命令放在上述括号前面调整大小。</p>
<blockquote>
<p>有时你可能会觉得 amsmath 宏包提供的定界符放大命令不太够用。通常这意味着你的公式太过复杂。此时你应当首先考虑将公式中的部分提出去，以字母符号代替以简化公式。如果你真的想要排版如此复杂的公式，你可以参考我<a href="https://liam.page/2018/11/09/the-bigger-than-bigger-delimiter-in-LaTeX/">这篇博文</a>。</p>
</blockquote>
<table>
<thead>
<tr>
<th><code>123456789</code></th>
<th><code>\[ \Biggl(\biggl(\Bigl(\bigl((x)\bigr)\Bigr)\biggr)\Biggr) \]\[ \Biggl[\biggl[\Bigl[\bigl[[x]\bigr]\Bigr]\biggr]\Biggr] \]\[ \Biggl \{\biggl \{\Bigl \{\bigl \{\{x\}\bigr \}\Bigr \}\biggr \}\Biggr\} \]\[ \Biggl\langle\biggl\langle\Bigl\langle\bigl\langle\langle x\rangle\bigr\rangle\Bigr\rangle\biggr\rangle\Biggr\rangle \]\[ \Biggl\lvert\biggl\lvert\Bigl\lvert\bigl\lvert\lvert x\rvert\bigr\rvert\Bigr\rvert\biggr\rvert\Biggr\rvert \]\[ \Biggl\lVert\biggl\lVert\Bigl\lVert\bigl\lVert\lVert x\rVert\bigr\rVert\Bigr\rVert\biggr\rVert\Biggr\rVert \]</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<figure data-type="image" tabindex="7"><img src="https://app.yinxiang.com/shard/s62/res/6044fdad-e1e6-4dfb-ba10-d8b782a88b53.png" alt=" "></figure>
<h3 id="省略号">省略号</h3>
<p>省略号用 <code>\dots</code>, <code>\cdots</code>, <code>\vdots</code>, <code>\ddots</code> 等命令表示。<code>\dots</code> 和 <code>\cdots</code> 的纵向位置不同，前者一般用于有下标的序列。</p>
<table>
<thead>
<tr>
<th><code>12</code></th>
<th><code>\[ x_1,x_2,\dots ,x_n\quad 1,2,\cdots ,n\quad\vdots\quad \ddots \]</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="矩阵">矩阵</h3>
<p><code>amsmath</code> 的 <code>pmatrix</code>, <code>bmatrix</code>, <code>Bmatrix</code>, <code>vmatrix</code>, <code>Vmatrix</code> 等环境可以在矩阵两边加上各种分隔符。</p>
<table>
<thead>
<tr>
<th><code>12345</code></th>
<th><code>\[ \begin{pmatrix} a&amp;b\\c&amp;d \end{pmatrix} \quad\begin{bmatrix} a&amp;b\\c&amp;d \end{bmatrix} \quad\begin{Bmatrix} a&amp;b\\c&amp;d \end{Bmatrix} \quad\begin{vmatrix} a&amp;b\\c&amp;d \end{vmatrix} \quad\begin{Vmatrix} a&amp;b\\c&amp;d \end{Vmatrix} \]</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>效果图：</p>
<figure data-type="image" tabindex="8"><img src="https://app.yinxiang.com/shard/s62/res/be31b9d4-d587-45fb-bde3-7cb1c15b9268.png" alt=" "></figure>
<p>使用 <code>smallmatrix</code> 环境，可以生成行内公式的小矩阵。</p>
<table>
<thead>
<tr>
<th><code>1</code></th>
<th><code>Marry has a little matrix $ ( \begin{smallmatrix} a&amp;b\\c&amp;d \end{smallmatrix} ) $.</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>效果图：</p>
<figure data-type="image" tabindex="9"><img src="https://app.yinxiang.com/shard/s62/res/c9e15349-8792-4901-a561-6ff5414aebbf.png" alt=" "></figure>
<h3 id="多行公式">多行公式</h3>
<p>有的公式特别长，我们需要手动为他们换行；有几个公式是一组，我们需要将他们放在一起；还有些类似分段函数，我们需要给它加上一个左边的花括号。</p>
<h4 id="长公式">长公式</h4>
<h5 id="不对齐">不对齐</h5>
<p>无须对齐的长公式可以使用 <code>multline</code> 环境。</p>
<table>
<thead>
<tr>
<th><code>1234</code></th>
<th><code>\begin{multline}x = a+b+c+{} \\d+e+f+g\end{multline}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>效果：</p>
<figure data-type="image" tabindex="10"><img src="https://app.yinxiang.com/shard/s62/res/1809f319-8317-4cca-8ea5-62b324e3e4e0.png" alt=" "></figure>
<p>如果不需要编号，可以使用 <code>multline*</code> 环境代替。</p>
<h5 id="对齐">对齐</h5>
<p>需要对齐的公式，可以使用 <code>aligned</code> <em>次环境</em>来实现，它必须包含在数学环境之内。</p>
<table>
<thead>
<tr>
<th><code>1234</code></th>
<th><code>\[\begin{aligned}x ={}&amp; a+b+c+{} \\&amp;d+e+f+g\end{aligned}\]</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>效果图：</p>
<figure data-type="image" tabindex="11"><img src="https://app.yinxiang.com/shard/s62/res/28cc31c6-5b54-4c01-9653-e6de4d2bf481.png" alt=" "></figure>
<h4 id="公式组">公式组</h4>
<p>无需对齐的公式组可以使用 <code>gather</code> 环境，需要对齐的公式组可以使用 <code>align</code> 环境。他们都带有编号，如果不需要编号可以使用带星花的版本。</p>
<table>
<thead>
<tr>
<th><code>12345678</code></th>
<th><code>\begin{gather}a = b+c+d \\x = y+z\end{gather}\begin{align}a &amp;= b+c+d \\x &amp;= y+z\end{align}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>效果：</p>
<figure data-type="image" tabindex="12"><img src="https://app.yinxiang.com/shard/s62/res/88313173-ba44-4e16-a6d3-376ab47fd8c2.png" alt=" "></figure>
<blockquote>
<p>请注意，不要使用 <code>eqnarray</code> 环境。原因可以参考：</p>
</blockquote>
<h4 id="分段函数">分段函数</h4>
<p>分段函数可以用<code>cases</code>次环境来实现，它必须包含在数学环境之内。</p>
<table>
<thead>
<tr>
<th><code>1234</code></th>
<th><code>\[ y= \begin{cases}-x,\quad x\leq 0 \\x,\quad x&gt;0\end{cases} \]</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>效果图：</p>
<figure data-type="image" tabindex="13"><img src="https://app.yinxiang.com/shard/s62/res/dfd330a1-98e4-4d0b-b1d1-871951df53b4.png" alt=" "></figure>
<h2 id="插入图片和表格">插入图片和表格</h2>
<h3 id="图片">图片</h3>
<p>关于 LaTeX 插图，首先要说的是：「LaTeX 只支持 <code>.eps</code> 格式的图档」这个说法是错误的。</p>
<p>在 LaTeX 中插入图片，有很多种方式。最好用的应当属利用 <code>graphicx</code> 宏包提供的 <code>\includegraphics</code> 命令。比如你在你的 TeX 源文件同目录下，有名为 <code>a.jpg</code> 的图片，你可以用这样的方式将它插入到输出文档中：</p>
<table>
<thead>
<tr>
<th><code>12345</code></th>
<th><code>\documentclass{article}\usepackage{graphicx}\begin{document}\includegraphics{a.jpg}\end{document}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>图片可能很大，超过了输出文件的纸张大小，或者干脆就是你自己觉得输出的效果不爽。这时候你可以用 <code>\includegraphics</code> 控制序列的可选参数来控制。比如</p>
<table>
<thead>
<tr>
<th><code>1</code></th>
<th><code>\includegraphics[width = .8\textwidth]{a.jpg}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>这样图片的宽度会被缩放至页面宽度的百分之八十，图片的总高度会按比例缩放。</p>
<blockquote>
<p><code>\includegraphics</code> 控制序列还有若干其他的可选参数可供使用，一般并用不到。感兴趣的话，可以去查看<a href="http://texdoc.net/texmf-dist/doc/latex/graphics/graphicx.pdf">该宏包的文档</a>。</p>
</blockquote>
<h3 id="表格">表格</h3>
<p><code>tabular</code> 环境提供了最简单的表格功能。它用 <code>\hline</code> 命令表示横线，在列格式中用 <code>|</code> 表示竖线；用 <code>&amp;</code> 来分列，用 <code>\\</code> 来换行；每列可以采用居左、居中、居右等横向对齐方式，分别用 <code>l</code>、<code>c</code>、<code>r</code> 来表示。</p>
<table>
<thead>
<tr>
<th><code>12345678910111213</code></th>
<th><code>\begin{tabular}{|l|c|r|} \hline操作系统&amp; 发行版&amp; 编辑器\\ \hlineWindows &amp; MikTeX &amp; TexMakerX \\ \hlineUnix/Linux &amp; teTeX &amp; Kile \\ \hlineMac OS &amp; MacTeX &amp; TeXShop \\ \hline通用&amp; TeX Live &amp; TeXworks \\ \hline\end{tabular}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>效果：</p>
<figure data-type="image" tabindex="14"><img src="https://app.yinxiang.com/shard/s62/res/c30c1714-a3ae-416a-9753-abcee8c1e583.png" alt=" "></figure>
<h3 id="浮动体">浮动体</h3>
<p>插图和表格通常需要占据大块空间，所以在文字处理软件中我们经常需要调整他们的位置。<code>figure</code> 和 <code>table</code> 环境可以自动完成这样的任务；这种自动调整位置的环境称作浮动体(float)。我们以 <code>figure</code> 为例。</p>
<table>
<thead>
<tr>
<th><code>123456</code></th>
<th><code>\begin{figure}[htbp]\centering\includegraphics{a.jpg}\caption{有图有真相}\label{fig:myphoto}\end{figure}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><code>htbp</code> 选项用来指定插图的理想位置，这几个字母分别代表 here, top, bottom, float page，也就是就这里、页顶、页尾、浮动页（专门放浮动体的单独页面或分栏）。<code>\centering</code> 用来使插图居中；<code>\caption</code> 命令设置插图标题，LaTeX 会自动给浮动体的标题加上编号。注意 <code>\label</code> 应该放在标题命令之后。</p>
<blockquote>
<p>图片和表格的各种特殊效果，限于篇幅此处无法详叙。请查看最后一章推荐的文档。</p>
<p>如果你想了解 LaTeX 的浮动体策略算法细节，你可以参考我博客中<a href="https://liam.page/series/#LaTeX-%E4%B8%AD%E7%9A%84%E6%B5%AE%E5%8A%A8%E4%BD%93">关于浮动体的系列文章</a></p>
<p>如果你困惑于「为什么图表会乱跑」或者「怎样让图表不乱跑」，请看<a href="https://www.zhihu.com/question/25082703/answer/30038248">我的回答</a>。</p>
</blockquote>
<h2 id="版面设置">版面设置</h2>
<h3 id="页边距">页边距</h3>
<p>设置页边距，推荐使用 <code>geometry</code> 宏包。可以在<a href="http://texdoc.net/texmf-dist/doc/latex/geometry/geometry.pdf">这里</a>查看它的说明文档。</p>
<p>比如我希望，将纸张的长度设置为 20cm、宽度设置为 15cm、左边距 1cm、右边距 2cm、上边距 3cm、下边距 4cm，可以在导言区加上这样几行：</p>
<table>
<thead>
<tr>
<th><code>123</code></th>
<th><code>\usepackage{geometry}\geometry{papersize={20cm,15cm}}\geometry{left=1cm,right=2cm,top=3cm,bottom=4cm}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="页眉页脚">页眉页脚</h3>
<p>设置页眉页脚，推荐使用 <code>fancyhdr</code> 宏包。可以在<a href="http://texdoc.net/texmf-dist/doc/latex/fancyhdr/fancyhdr.pdf">这里</a>查看它的说明文档。</p>
<p>比如我希望，在页眉左边写上我的名字，中间写上今天的日期，右边写上我的电话；页脚的正中写上页码；页眉和正文之间有一道宽为 0.4pt 的横线分割，可以在导言区加上如下几行：</p>
<table>
<thead>
<tr>
<th><code>1234567891011</code></th>
<th><code>\usepackage{fancyhdr}\pagestyle{fancy}\lhead{\author}\chead{\date}\rhead{152xxxxxxxx}\lfoot{}\cfoot{\thepage}\rfoot{}\renewcommand{\headrulewidth}{0.4pt}\renewcommand{\headwidth}{\textwidth}\renewcommand{\footrulewidth}{0pt}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="首行缩进">首行缩进</h3>
<p>CTeX 宏集已经处理好了首行缩进的问题（自然段前空两格汉字宽度）。因此，使用 CTeX 宏集进行中西文混合排版时，我们不需要关注首行缩进的问题。</p>
<blockquote>
<p>如果你因为某些原因选择不适用 CTeX 宏集（不推荐）进行中文支持和版式设置，则你需要做额外的一些工作。</p>
<ul>
<li>调用 <code>indentfirst</code> 宏包。具体来说，中文习惯于每个自然段的段首都空出两个中文汉字的长度作为首行缩进，但西文行文习惯于不在逻辑节（<code>\section</code> 等）之后缩进。使用改宏包可使 LaTeX 在每个自然段都首行缩进。</li>
<li>设置首行缩进长度 <code>\setlength{\parindent}{2\ccwd}</code>。其中 <code>\ccwd</code> 是 <code>xeCJK</code> 定义的宏，它表示当前字号中一个中文汉字的宽度。</li>
</ul>
</blockquote>
<h3 id="行间距">行间距</h3>
<p>我们可以通过 <code>setspace</code> 宏包提供的命令来调整行间距。比如在导言区添加如下内容，可以将行距设置为字号的 1.5 倍：</p>
<table>
<thead>
<tr>
<th><code>12</code></th>
<th><code>\usepackage{setspace}\onehalfspacing</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>具体可以查看该宏包的<a href="http://texdoc.net/texmf-dist/doc/latex/setspace/README">文档</a>。</p>
<blockquote>
<p>请注意用词的差别：</p>
<ul>
<li>行距是字号的 1.5 倍；</li>
<li>1.5 倍行距。</li>
</ul>
<p>事实上，这不是设置 1.5 倍行距的正确方法，请参考<a href="https://liam.page/2013/10/17/LaTeX-Linespace/">这篇博文</a>。另外，<a href="https://github.com/RuixiZhang42">RuixiZhang</a> 开发了 <a href="https://github.com/CTeX-org/ctex-kit/tree/master/zhlineskip">zhlineskip</a> 宏包，提供了对中西文混排更细致的行距控制能力。</p>
</blockquote>
<h3 id="段间距">段间距</h3>
<p>我们可以通过修改长度 <code>\parskip</code> 的值来调整段间距。例如在导言区添加以下内容</p>
<table>
<thead>
<tr>
<th><code>1</code></th>
<th><code>\addtolength{\parskip}{.4em}</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>则可以在原有的基础上，增加段间距 0.4em。如果需要减小段间距，只需将该数值改为负值即可。</p>
<h2 id="tex-家族">TeX 家族</h2>
<p>恭喜你终于看到了这里。如果你认真完成了上面所有的练习，并琢磨了其中的意义，相信你已经可以用 LaTeX 排版出漂亮的文档了。现在我们说一点历史，帮助你更好地理解 TeX 这个系统。</p>
<p>带有 TeX 的词，仅仅是本文就已经提到了 TeX, LaTeX, XeLaTeX。通常中国学生面对不了解意思的一群形近单词，都会有一种「本能的恐惧」（笑~）。因此，「大神们」在为新手介绍 TeX 的时候，如果互相争论 「XXTeX 比 YYTeX 好」或者是「XXTeX 的 YYTeX 如何如何」，往往会蹦出下面这些带有 TeX 的词汇：<br>
TeX, pdfTeX, XeTeX, LuaTeX, LaTeX, pdfLaTeX, XeLaTeX …</p>
<p>事实上，这部分的内容太过复杂，我自己的了解也实在有限。所以下面这部分的内容也只能是对我了解到的知识的一个概括，甚至可能有些许谬误。所以大家只需要将这部分的内容当做是一个参考就可以了。</p>
<h3 id="tex-latex">TeX - LaTeX</h3>
<p>TeX 是高德纳（Donald Ervin Knuth，1938年1月10日 –）教授<s>愤世嫉俗</s>追求完美做出来的排版引擎，同时也是该引擎使用的标记语言（Markup Language）的名称。这里所谓的引擎，是指能够实现断行、分页等操作的程序（请注意这并不是定义）；这里的标记语言，是指一种将控制命令和文本结合起来的格式，它的主体是其中的文本而控制命令则实现一些特殊效果（同样请注意这并不是定义）。</p>
<blockquote>
<p>你可以在<a href="http://en.wikipedia.org/wiki/TeX">这里</a>找到关于 TeX 引擎的具体描述；</p>
<p>你可以在<a href="http://en.wikipedia.org/wiki/Markup_language">这里</a>找到关于标记语言的具体描述。</p>
</blockquote>
<p>而 LaTeX 则是 L. Lamport （1941年2月7日 – ） 教授开发的基于 TeX 的排版系统。实际上 LaTeX 利用 TeX 的控制命令，定义了许多新的控制命令并封装成一个可执行文件。这个可执行文件会去解释 LaTeX 新定义的命令成为 TeX 的控制命令，并最终交由 TeX 引擎进行排版。</p>
<blockquote>
<p>实际上，LaTeX 是基于一个叫做 plain TeX 的格式的。plain TeX 是高德纳教授为了方便用户，自己基于原始的 TeX 定义的格式，但实际上 plain TeX 的命令仍然十分晦涩。至于原始的 TeX 直接使用的人就更少了，因此 plain TeX 格式逐渐就成为了 TeX 格式的同义词，尽管他们事实上是不同的。</p>
</blockquote>
<p>因此在 TeX - LaTeX 组合中，</p>
<ol>
<li>最终进行断行、分页等操作的，是 TeX 引擎；</li>
<li>LaTeX 实际上是一个工具，它将用户按照它的格式编写的文档解释成 TeX 引擎能理解的形式并交付给 TeX 引擎处理，再将最终结果返回给用户。</li>
</ol>
<h3 id="pdftex-pdflatex">pdfTeX - pdfLaTeX</h3>
<p>TeX 系统生成的文件是 <em>dvi</em> 格式，虽然可以用其他程序将其转换为例如 pdf 等更为常见的格式，但是毕竟不方便。</p>
<blockquote>
<p>dvi 格式是为了排版而产生的，它本身并不支持所谓的「交叉引用」，pdfTeX 直接输出 pdf 格式的文档，这也是 pdfTeX 相对 TeX 进步（易用性方面）的地方。</p>
</blockquote>
<p>为了解决这个问题，Hàn Thế Thành 博士在他的博士论文中提出了 pdfTeX 这个对 TeX 引擎的扩展。二者最主要的差别就是 pdfTeX 直接输出 pdf 格式文档，而 TeX 引擎则输出 dvi 格式的文档。</p>
<blockquote>
<p>pdfTeX 的信息可以查看<a href="http://en.wikipedia.org/wiki/PdfTeX">wiki</a>.</p>
</blockquote>
<p>pdfLaTeX 这个程序的主要工作依旧是将 LaTeX 格式的文档进行解释，不过此次是将解释之后的结果交付给 pdfTeX 引擎处理。</p>
<h3 id="xetex-xelatex">XeTeX - XeLaTeX</h3>
<p>高德纳教授在实现 TeX 的当初并没有考虑到中日韩等字符的处理，而只支持 ASCII 字符。这并不是说中日韩字符就无法使用 TeX 引擎排版了，事实上 TeX 将每个字符用一个框包括起来（这被称为<strong>盒子</strong>）然后将一个个的盒子按照一定规则排列起来，因而 TeX 的算法理论上适用于任何字符。ASCII 字符简单理解，就是在半角模式下你的键盘能直接输出的字符。</p>
<p>在 XeTeX 出现之前，为了能让 TeX 系统排版中文，国人曾使用了 天元、CCT、<strong>CJK</strong> 等手段处理中文。其中 天元和CCT 现在已经基本不用，CJK 因为使用时间长且效果相对较好，现在还有人使用。</p>
<p>不同于 CJK 等方式使用 TeX 和 pdfTeX 这两个不直接支持 Unicode 字符的引擎，XeTeX 引擎直接支持 Unicode 字符。也就是说现在不使用 CJK 也能排版中日韩文的文档了，并且这种方式要比之前的方式更加优秀。</p>
<p>XeLaTeX 和 XeTeX 的关系与 pdfLaTeX 和 pdfTeX 的关系类似，这里不再赘述。</p>
<p>使用 XeTeX 引擎需要使用 UTF-8 编码。</p>
<blockquote>
<p>所谓编码就是字符在计算机储存时候的对应关系。例如，假设有一种编码，将汉字「你」对应为数字「1」；「好」对应为数字「2」，则含有「你好」的纯文本文件，在计算机中储存为「12」（读取文件的时候，将「12」再转换为「你好」显示在屏幕上或打印出来）。</p>
<p>UTF-8 编码是 Unicode 编码的一种，可以参考它的 <a href="http://en.wikipedia.org/wiki/UTF-8">wiki</a>.</p>
</blockquote>
<h3 id="luatex">LuaTeX</h3>
<p>LuaTeX 是正在开发完善的一个 TeX 引擎，相对它的前辈们还相当的不完善，这里不赘述。</p>
<h3 id="ctex-miktex-tex-live">CTeX - MiKTeX - TeX Live</h3>
<p>之前介绍了 TeX, LaTeX, pdfTeX, pdfLaTeX, XeTeX, XeLaTeX, LuaTeX 等，他们都是 TeX 家族的一部分。但是作为一个能够使用的 TeX 系统，仅仅有他们还是不够的。CTeX, MiKTeX, TeX Live 都是被称为「发行」的软件合集。他们包括了上述各种引擎的可执行程序，以及一些文档类、模板、字体文件、辅助程序等等。其中 CTeX 是建立在 MiKTeX 的基础之上的。</p>
<h3 id="总结">总结</h3>
<p>TeX - pdfTeX - XeTeX - LuaTeX 都是排版引擎，按照先进程度递增（LuaTeX 尚未完善）。</p>
<p>LaTeX 是一种格式，基于 TeX 格式定义了很多更方便使用的控制命令。上述四个引擎都有对应的程序将 LaTeX 格式解释成引擎能处理的内容。</p>
<p>CTeX, MiKTeX, TeX Live 都是 TeX 的发行，他们是许许多多东西的集合。</p>
<h2 id="出现问题应当如何处理怎样聪明地提出你的问题怎样从这里毕业">出现问题应当如何处理/怎样聪明地提出你的问题——怎样从这里毕业</h2>
<p>这篇文章原来的名字叫做<strong>慢慢爱上 LaTeX</strong>，后来行文的过程中发觉 LaTeX 实在是有太多的内容可以讲述，越发地没有把握让大家仅仅通过这一篇短小的文章就喜欢上 LaTeX，于是改成了现在这个名字。</p>
<p>限于篇幅，还有我的精力，这篇文章事实上还有许多的问题没有讲明白。它仅仅是提供了一些，在你学习使用 LaTeX 可能遇到的问题的解决方案，并不完全，而且没有教会你如何处理编译过程中可能遇到的形形色色的错误。<br>
所以这最终只能是一篇小文，而不可能成为一篇正式的文档。</p>
<p>因此，如果通过我这篇小文，体验到了 LaTeX 带给你的一些乐趣，有了对 LaTeX 的兴趣（如果是这样，我就已经能够无比开心了~），请务必去阅读一些正式的 LaTeX 文档。</p>
<h3 id="去读文档">去读文档</h3>
<p>关于 LaTeX 的文档有很多，其中有些内容过时地很快。所以有必要告诉大家，哪些文档应该看，那些文档不应该看。索性，这个问题，刘海洋(milksea)前辈已经叙述得很清楚了。前段时间，我和几个朋友，将现在看起来还未过时的文档打包上传到了我的博客。参考：<a href="https://liam.page/attachment/attachment/LaTeX-useful-tools/LaTeX_Docs_2014.zip">ZIP 归档</a>。</p>
<h3 id="遇到问题怎么办">遇到问题怎么办</h3>
<ol>
<li>绝对的新手，先读完一本入门读物，了解基本的知识；</li>
<li>无论如何，先读文档！绝大部分问题都是文档可以解决的；</li>
<li>利用 Google 搜索你的问题；</li>
<li>在各个论坛或者 LaTeX 交流群里聪明地提出你的问题。</li>
</ol>
<p>参考：<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md">https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[动态规划]]></title>
        <id>https://tienyeung.github.io//post/Dynamic-Program</id>
        <link href="https://tienyeung.github.io//post/Dynamic-Program">
        </link>
        <updated>2019-06-15T08:38:04.000Z</updated>
        <summary type="html"><![CDATA[<p><strong>动态规划</strong>的本质不在于是递推或是递归，也不需要纠结是不是内存换时间。</p>
<p>理解动态规划并不需要数学公式介入，只是完全解释清楚需要点篇幅…首先需要明白哪些问题不是动态规划可以解决的，才能明白为神马需要动态规划。不过好处时顺便也就搞明白了递推贪心搜索和动规之间有什么关系，以及帮助那些总是把动规当成搜索解的同学建立动规的思路。</p>
]]></summary>
        <content type="html"><![CDATA[<p><strong>动态规划</strong>的本质不在于是递推或是递归，也不需要纠结是不是内存换时间。</p>
<p>理解动态规划并不需要数学公式介入，只是完全解释清楚需要点篇幅…首先需要明白哪些问题不是动态规划可以解决的，才能明白为神马需要动态规划。不过好处时顺便也就搞明白了递推贪心搜索和动规之间有什么关系，以及帮助那些总是把动规当成搜索解的同学建立动规的思路。</p>
<!-- more -->
<p>动态规划是对于 某一类问题 的解决方法！！重点在于如何鉴定“某一类问题”是动态规划可解的而不是纠结解决方法是递归还是递推！</p>
<p>怎么鉴定dp可解的一类问题需要从计算机是怎么工作的说起…计算机的本质是一个状态机，内存里存储的所有数据构成了当前的状态，CPU只能利用当前的状态计算出下一个状态（不要纠结硬盘之类的外部存储，就算考虑他们也只是扩大了状态的存储容量而已，并不能改变下一个状态只能从当前状态计算出来这一条铁律）</p>
<p>当你企图使用计算机解决一个问题是，其实就是在思考如何将这个问题表达成状态（用哪些变量存储哪些数据）以及如何在状态中转移（怎样根据一些变量计算出另一些变量）。所以所谓的空间复杂度就是为了支持你的计算所必需存储的状态最多有多少，所谓时间复杂度就是从初始状态到达最终状态中间需要多少步！</p>
<p>太抽象了还是举个例子吧：</p>
<p>比如说我想计算第100个非波那契数，每一个非波那契数就是这个问题的一个状态，每求一个新数字只需要之前的两个状态。所以同一个时刻，最多只需要保存两个状态，空间复杂度就是常数；每计算一个新状态所需要的时间也是常数且状态是线性递增的，所以时间复杂度也是线性的。</p>
<p>上面这种状态计算很直接，只需要依照固定的模式从旧状态计算出新状态就行（a[i]=a[i-1]+a[i-2]），不需要考虑是不是需要更多的状态，也不需要选择哪些旧状态来计算新状态。对于这样的解法，我们叫递推。</p>
<p>非波那契那个例子过于简单，以至于让人忽视了阶段的概念，所谓阶段是指随着问题的解决，在同一个时刻可能会得到的不同状态的集合。非波那契数列中，每一步会计算得到一个新数字，所以每个阶段只有一个状态。想象另外一个问题情景，假如把你放在一个围棋棋盘上的某一点，你每一步只能走一格，因为你可以东南西北随便走，所以你当你同样走四步可能会处于很多个不同的位置。从头开始走了几步就是第几个阶段，走了n步可能处于的位置称为一个状态，走了这n步所有可能到达的位置的集合就是这个阶段下所有可能的状态。</p>
<p>现在问题来了，有了阶段之后，计算新状态可能会遇到各种奇葩的情况，针对不同的情况，就需要不同的算法，下面就分情况来说明一下：</p>
<p>假如问题有n个阶段，每个阶段都有多个状态，不同阶段的状态数不必相同，一个阶段的一个状态可以得到下个阶段的所有状态中的几个。那我们要计算出最终阶段的状态数自然要经历之前每个阶段的某些状态。</p>
<p>好消息是，有时候我们并不需要真的计算所有状态，比如这样一个弱智的棋盘问题：从棋盘的左上角到达右下角最短需要几步。答案很显然，用这样一个弱智的问题是为了帮助我们理解阶段和状态。某个阶段确实可以有多个状态，正如这个问题中走n步可以走到很多位置一样。但是同样n步中，有哪些位置可以让我们在第n+1步中走的最远呢？没错，正是第n步中走的最远的位置。换成一句熟悉话叫做“下一步最优是从当前最优得到的”。所以为了计算最终的最优值，只需要存储每一步的最优值即可，解决符合这种性质的问题的算法就叫贪心。如果只看最优状态之间的计算过程是不是和非波那契数列的计算很像？所以计算的方法是递推。</p>
<p>既然问题都是可以划分成阶段和状态的。这样一来我们一下子解决了一大类问题：一个阶段的最优可以由前一个阶段的最优得到。</p>
<p>如果一个阶段的最优无法用前一个阶段的最优得到呢？</p>
<p>什么你说只需要之前两个阶段就可以得到当前最优？那跟只用之前一个阶段并没有本质区别。最麻烦的情况在于你需要之前所有的情况才行。</p>
<p>再来一个迷宫的例子。在计算从起点到终点的最短路线时，你不能只保存当前阶段的状态，因为题目要求你最短，所以你必须知道之前走过的所有位置。因为即便你当前再的位置不变，之前的路线不同会影响你的之后走的路线。这时你需要保存的是之前每个阶段所经历的那个状态，根据这些信息才能计算出下一个状态！</p>
<p>每个阶段的状态或许不多，但是每个状态都可以转移到下一阶段的多个状态，所以解的复杂度就是指数的，因此时间复杂度也是指数的。哦哦，刚刚提到的之前的路线会影响到下一步的选择，这个令人不开心的情况就叫做有后效性。</p>
<p>刚刚的情况实在太普遍，解决方法实在太暴力，有没有哪些情况可以避免如此的暴力呢？</p>
<p>契机就在于后效性。</p>
<p>有一类问题，看似需要之前所有的状态，其实不用。不妨也是拿最长上升子序列的例子来说明为什么他不必需要暴力搜索，进而引出动态规划的思路。</p>
<p>假装我们年幼无知想用搜索去寻找最长上升子序列。怎么搜索呢？需要从头到尾依次枚举是否选择当前的数字，每选定一个数字就要去看看是不是满足“上升”的性质，这里第i个阶段就是去思考是否要选择第i个数，第i个阶段有两个状态，分别是选和不选。哈哈，依稀出现了刚刚迷宫找路的影子！咦慢着，每次当我决定要选择当前数字的时候，只需要和之前选定的一个数字比较就行了！这是和之前迷宫问题的本质不同！这就可以纵容我们不需要记录之前所有的状态啊！既然我们的选择已经不受之前状态的组合的影响了，那时间复杂度自然也不是指数的了啊！虽然我们不在乎某序列之前都是什么元素，但我们还是需要这个序列的长度的。所以我们只需要记录以某个元素结尾的LIS长度就好！因此第i个阶段的最优解只是由前i-1个阶段的最优解得到的，然后就得到了DP方程</p>
<p>所以一个问题是该用递推、贪心、搜索还是动态规划，完全是由这个问题本身阶段间状态的转移方式决定的！</p>
<p>每个阶段只有一个状态-&gt;递推；<br>
每个阶段的最优状态都是由上一个阶段的最优状态得到的-&gt;贪心；<br>
每个阶段的最优状态是由之前所有阶段的状态的组合得到的-&gt;搜索；<br>
每个阶段的最优状态可以从之前某个阶段的某个或某些状态直接得到而不管之前这个状态是如何得到的-&gt;动态规划。</p>
<blockquote>
<p>每个阶段的最优状态可以从之前某个阶段的某个或某些状态直接得到</p>
</blockquote>
<p>这个性质叫做最优子结构；</p>
<blockquote>
<p>而不管之前这个状态是如何得到的</p>
</blockquote>
<p>这个性质叫做无后效性。</p>
<p>另：其实动态规划中的最优状态的说法容易产生误导，以为只需要计算最优状态就好，LIS问题确实如此，转移时只用到了每个阶段“选”的状态。但实际上有的问题往往需要对每个阶段的所有状态都算出一个最优值，然后根据这些最优值再来找最优状态。比如背包问题就需要对前i个包（阶段）容量为j时（状态）计算出最大价值。然后在最后一个阶段中的所有状态种找到最优值。</p>
]]></content>
    </entry>
</feed>